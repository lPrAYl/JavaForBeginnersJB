type: edu
files:
- name: src/battleship/Main.java
  visible: true
  text: |
    package battleship;

    public class Main {

        public static void main(String[] args) {
            // Write your code here
        }
    }
  learner_created: false
- name: test/Tests.java
  visible: false
  text: |-
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;


    public class Tests extends StageTest<String> {
        @DynamicTestingMethod
        CheckResult testExample() {

            TestedProgram main = new TestedProgram();
            String output = main.start().trim();
            String[][] matrix;

            if (!matrixIsEmpty(getFieldMatrix(output))) {
                return CheckResult.wrong("Not an empty game field at the start of the game");
            }

            // Filling the first player field
            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After starting the program, you should request " +
                    "the coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("F3 F7").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "F3 F7");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("A1 D1").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "A1 D1");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("J7 J10").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("J10 J8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "J10 J8");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("B9 D8").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("B9 D9").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "B9 D9");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("E6 D6").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Too close to another ship)");
            }

            output = main.execute("I2 J2").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "I2 J2");

            if (!output.toLowerCase().contains("enter")) {
                return CheckResult.wrong("No offer found to give the move to another player");
            }

            output = main.execute("");

            // Filling the second player field

            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After filling the first player field, you should request the second player's " +
                    "coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("H2 H6");
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "H2 H6");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("F3 F6");
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "F3 F6");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("H8 F8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "H8 F8");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("D4 D6").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "D4 D6");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("D8 C8");
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "D8 C8");

            if (!output.toLowerCase().contains("enter")) {
                return CheckResult.wrong("no offer found to give the move to another player");
            }
            output = main.execute("");

            // Players' moves
            String[] splittedOutput = output.split("---\n");
            if (splittedOutput.length != 2) {
                return CheckResult.wrong("An incorrect number of game fields.\nThere is should 2 fields separated by \"---------------------\"");
            }
            if (!matrixIsEmpty(getFieldMatrix(splittedOutput[0]))) {
                return CheckResult.wrong("At the start of the game the upper field should be empty");
            }
            findAllShips(getFieldMatrix(splittedOutput[1]),
                new String[]{"F3 F7", "A1 D1", "J10 J8", "B9 D9", "I2 J2"});

            output = main.execute("I3");
            if (!output.toLowerCase().contains("missed")) {
                return CheckResult.wrong("Incorrect reaction of the program if the player missed");
            }

            output = main.execute("");
            checkMissing(getFieldMatrix(output), "I3");

            splittedOutput = output.split("---\n");
            if (splittedOutput.length != 2) {
                return CheckResult.wrong("An incorrect number of game fields (2 should be)");
            }
            if (!matrixIsEmpty(getFieldMatrix(splittedOutput[0]))) {
                return CheckResult.wrong("At the start of the game the upper field should be empty");
            }
            findAllShips(getFieldMatrix(splittedOutput[1]),
                new String[]{"H2 H6", "F3 F6", "H8 F8", "D4 D6", "D8 C8"});

            output = main.execute("C9");
            if (!output.toLowerCase().contains("hit")) {
                return CheckResult.wrong("Incorrect reaction of the program if the player hit the ship");
            }
            main.execute("");

            makeMoveTillTheEnd(main);

            return CheckResult.correct();
        }

        void makeMoveTillTheEnd(TestedProgram main) {

            String[] secondPlayerMoves = {"A1", "B1", "C1", "D1", "B9", "C9", "D9", "F3", "F4", "F5", "F6", "F7", "I2", "J2", "J8", "J9", "J10"};
            String[] firstPlayerMoves = {"D4", "D5", "D6", "C8", "D8", "F3", "F4", "F5", "F6", "F7", "D10", "E10", "F10", "G10", "J1", "J2", "J3"};

            String[][] matrix;
            String output;
            int i;

            for (i = 0; i < 3; i++) {
                main.execute(firstPlayerMoves[i]);
                main.execute("");
                main.execute(secondPlayerMoves[i]);
                main.execute("");
            }

            main.execute(firstPlayerMoves[i]);
            main.execute("");

            output = main.execute(secondPlayerMoves[i]);
            if (!output.contains("sank")) {
                throw new WrongAnswer("After a ship was sunk you should print \"You sank a ship!\" and ask to press Enter.");
            }
            output = main.execute("");

            String[] splittedOutput = output.split("---\n");
            if (splittedOutput.length != 2) {
                throw new WrongAnswer("An incorrect number of game fields.\nThere is should 2 fields separated by \"---------------------\"");
            }

            matrix = getFieldMatrix(splittedOutput[1]);
            checkShot(matrix, "A1");
            checkShot(matrix, "B1");
            checkShot(matrix, "C1");
            checkShot(matrix, "D1");

            for (i = i + 1; i < secondPlayerMoves.length - 1; i++) {
                main.execute(firstPlayerMoves[i]);
                main.execute("");
                main.execute(secondPlayerMoves[i]);
                main.execute("");
            }

            main.execute(firstPlayerMoves[i]);
            main.execute("");
            output = main.execute(secondPlayerMoves[i]).toLowerCase();

            if (!output.contains("won") || !output.contains("congratulations")) {
                throw new WrongAnswer("If a player has sunk all enemy ships you should print:\n" +
                    "\"You sank the last ship. You won. Congratulations!\"");
            }
        }

        void findShipByCoordinates(String[][] matrix, String coordinates) {
            int[] coordinatesInt = parseCoordinates(coordinates);

            if (coordinatesInt[0] > coordinatesInt[2]) {
                int swap = coordinatesInt[0];
                coordinatesInt[0] = coordinatesInt[2];
                coordinatesInt[2] = swap;
            } else if (coordinatesInt[1] > coordinatesInt[3]) {
                int swap = coordinatesInt[1];
                coordinatesInt[1] = coordinatesInt[3];
                coordinatesInt[3] = swap;
            }

            if (coordinatesInt[0] == coordinatesInt[2]) {
                int cord = coordinatesInt[0];
                for (int i = coordinatesInt[1]; i <= coordinatesInt[3]; i++) {
                    if (!matrix[cord][i].toLowerCase().equals("x") && !matrix[cord][i].toLowerCase().equals("o")) {
                        throw new WrongAnswer("The ship's cells were not found at the coordinates \"" + coordinates + "\"");
                    }
                }
            } else {
                int cord = coordinatesInt[1];
                for (int i = coordinatesInt[0]; i <= coordinatesInt[2]; i++) {
                    if (!matrix[i][cord].toLowerCase().equals("x") && !matrix[i][cord].toLowerCase().equals("o")) {
                        throw new WrongAnswer("The ship's cells were not found at the \"" + coordinates + "\"");
                    }
                }
            }
        }

        boolean matrixIsEmpty(String[][] matrix) {
            for (String[] strings : matrix) {
                for (int j = 0; j < matrix.length; j++) {
                    if (!strings[j].trim().equals("~")) {
                        return false;
                    }
                }
            }
            return true;
        }

        void checkShot(String[][] matrix, String coordinate) {
            int[] parsedCoordinate = new int[2];
            parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
            parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;

            if (!matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("x")) {
                throw new WrongAnswer("Expected hit in \"" + coordinate + "\".");
            }
        }

        boolean checkMissing(String[][] matrix, String coordinate) {
            int[] parsedCoordinate = new int[2];
            parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
            parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;

            return matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("m");
        }

        int[] parseCoordinates(String coordinatesString) {
            String[] splittedCoords = coordinatesString.split(" ");
            int[] parsedCoordinates = new int[4];

            parsedCoordinates[0] = charToInt(splittedCoords[0].substring(0, 1));
            parsedCoordinates[1] = Integer.parseInt(splittedCoords[0].substring(1)) - 1;
            parsedCoordinates[2] = charToInt(splittedCoords[1].substring(0, 1));
            parsedCoordinates[3] = Integer.parseInt(splittedCoords[1].substring(1)) - 1;

            return parsedCoordinates;
        }

        int charToInt(String charCoordinate) {
            charCoordinate = charCoordinate.toLowerCase();
            char character = charCoordinate.charAt(0);
            return (int) character - (int) 'a';
        }

        String[][] getFieldMatrix(String output) {

            WrongAnswer cantParseException = new WrongAnswer("Can't parse the game field\n" +
                "Make sure you print it like in examples!");

            String[] splittedOutput = output.split("\n");
            String[][] matrix = new String[10][10];

            try {
                int index = 0;
                while (!(splittedOutput[index].contains("1") &&
                    splittedOutput[index].contains("2") &&
                    splittedOutput[index].contains("10"))) {
                    index++;
                    if (index > 1000) {
                        throw cantParseException;
                    }
                }
                index++;

                for (int i = 0; i < 10; i++) {
                    String temp = splittedOutput[index].substring(2).trim();
                    String[] splittedLine = temp.trim().split(" ");
                    if (splittedLine.length != 10) {
                        throw cantParseException;
                    }
                    matrix[i] = splittedLine;
                    index++;
                }
            } catch (IndexOutOfBoundsException ignored) {
                throw cantParseException;
            }

            return matrix;
        }

        boolean isGameFieldPrinted(String output) {
            return output.contains("1") && output.contains("2") && output.contains("10");
        }

        void findAllShips(String[][] matrix, String[] coordinates) {
            for (String item : coordinates) {
                findShipByCoordinates(matrix, item);
            }
        }
    }
  learner_created: false
- name: src/battleship/Ships.java
  visible: true
  text: |
    package battleship;

    public enum Ships {
        AIRCRAFT_CARRIER("Aircraft Carrier", 5),
        BATTLESHIP("Battleship", 4),
        SUBMARINE("Submarine", 3),
        CRUISER("Cruiser", 3),
        DESTROYER("Destroyer", 2);

        private String typeOfShip;
        private int length;

        Ships(String ship, int length) {
            this.typeOfShip = ship;
            this.length = length;
        }

        public String getTypeOfShip() {
            return typeOfShip;
        }

        public int getLength() {
            return length;
        }
    }
  learner_created: true
- name: src/battleship/Point.java
  visible: true
  text: |
    package battleship;

    public class Point {
        public int x;
        public int y;

        Point(char x, String y) {
            this.x = x - 64;
            this.y = Integer.parseInt(y);
        }
    }
  learner_created: true
- name: src/battleship/Board.java
  visible: true
  text: |
    package battleship;

    public class Board {
        private char field[][];

        Board() {
            boardInit();
        }

        private void boardInit() {
            this.field = new char[11][11];

            for (int i = 0; i < 11; i++) {
                for (int j = 0; j < 11; j++) {
                    if (i == 0 && j == 0) {
                        this.field[i][j] = ' ';
                    } else if (i == 0 && j == 10) {
                        this.field[i][j] = '1';
                    } else if (i == 0) {
                        this.field[i][j] = (char) (j + '0');
                    } else if (j == 0) {
                        this.field[i][j] = (char) (i - 1 + 'A');
                    } else {
                        this.field[i][j] = '~';
                    }
                }
            }
            this.printBoard();
        }

        public char getCeil(int i, int j) {
            return this.field[i][j];
        }

        public void setCeil(int i, int j, char ch) {
            this.field[i][j] = ch;
        }

        public void printBoard() {
            for (int i = 0; i < 11; i++) {
                for (int j = 0; j < 11; j++) {
                    if (i == 0 && j == 10) {
                        System.out.println(this.field[i][j] + "0");
                    } else if (j == 10) {
                        System.out.println(this.field[i][j]);
                    } else {
                        System.out.print(this.field[i][j] + " ");
                    }
                }
            }
            System.out.println();
        }

        public void printBoardWithFogOfWar() {
            char[][] copyField = new char[11][11];

            for (int i = 0; i < 11; i++) {
                for (int j = 0; j < 11; j++) {
                    copyField[i][j] = field[i][j];
                }
            }

            for (int i = 0; i < 11; i++) {
                for (int j = 0; j < 11; j++) {
                    if (copyField[i][j] == 'O') {
                        copyField[i][j] = '~';
                    }
                    if (i == 0 && j == 10) {
                        System.out.println(copyField[i][j] + "0");
                    } else if (j == 10) {
                        System.out.println(copyField[i][j]);
                    } else {
                        System.out.print(copyField[i][j] + " ");
                    }
                }
            }
            System.out.println();
        }

    }
  learner_created: true
- name: src/battleship/Game.java
  visible: true
  text: |
    package battleship;

    import java.util.Scanner;

    public class Game {
        private Board board;
        private Scanner scanner;
        private Ships ships;
        Game() {
            this.board = new Board();
        }

        private boolean isAShipNearby(Point first, Point second) {
            int rightY = Math.max(first.y, second.y);
            int leftY = Math.min(first.y, second.y);
            int bottomX = Math.max(first.x, second.x);
            int upperX = Math.min(first.x, second.x);
            int rightEdge = rightY == 10 ? 10 : rightY + 1;
            int bottomEdge = bottomX == 10 ? 10 : bottomX + 1;

            for (int i = upperX - 1; i < bottomEdge + 1; i++) {
                for (int j = leftY - 1; j < rightEdge + 1; j++) {
                    if (board.getCeil(i, j) == 'O') {
                        return true;
                    }
                }
            }

            return false;
        }

        private void placeAShip(Point first, Point second) {
            int rightY = Math.max(first.y, second.y);
            int leftY = Math.min(first.y, second.y);
            int bottomX = Math.max(first.x, second.x);
            int upperX = Math.min(first.x, second.x);

            for (int i = upperX; i < bottomX + 1; i++) {
                for (int j = leftY; j < rightY + 1; j++) {
                    board.setCeil(i, j, 'O');
                }
            }
            board.printBoard();
        }

        private boolean isShipPlaced(Point first, Point second, Ships ship) {
            if (first.x != second.x && first.y != second.y) {
                System.out.println("Error! Wrong ship location! Try again:");
            } else if (Math.abs(first.x - second.x) != ship.getLength() - 1
                    && Math.abs(first.y - second.y) != ship.getLength() - 1) {
                System.out.printf("Error! Wrong length of the %s! Try again:\n", ship.getTypeOfShip());
            } else if (isAShipNearby(first, second)) {
                System.out.println("Error! You placed it too close to another one. Try again:");
            } else {
                placeAShip(first, second);
                return true;
            }

            return false;
        }

        private boolean isSankAShip(Point point) {
           int i;
           int j;

            j = point.y;
            i = point.x - 1;
            while (i > 0 && (board.getCeil(i, j) != '~' && board.getCeil(i, j) != 'M')) {
                if (board.getCeil(i, j) == 'O') {
                    return false;
                }
                i--;
            }
            i = point.x + 1;
            while (i < 11 && (board.getCeil(i, j) != '~' && board.getCeil(i, j) != 'M')) {
                if (board.getCeil(i, j) == 'O') {
                    return false;
                }
                i++;
            }

            i = point.x;
            j = point.y - 1;
            while (j > 0 && (board.getCeil(i, j) != '~' && board.getCeil(i, j) != 'M')) {
                if (board.getCeil(i, j) == 'O') {
                    return false;
                }
                j--;
            }
            j = point.y + 1;
            while (j < 11 && (board.getCeil(i, j) != '~' && board.getCeil(i, j) != 'M')) {
                if (board.getCeil(i, j) == 'O') {
                    return false;
                }
                j++;
            }

            return true;
        }

        private boolean wasShipLast() {
            for (int i = 1; i < 11; i++) {
                for (int j = 1; j < 11; j++) {
                    if (board.getCeil(i, j) == 'O') {
                        return false;
                    }
                }
            }
            System.out.println("You sank the last ship. You won. Congratulations!");

            return true;
        }
        private boolean isShotFired(String shot) {
            Point shotPoint = new Point(shot.charAt(0), shot.substring(1));

            if (shotPoint.x < 1 || shotPoint.x > 10 || shotPoint.y < 1 || shotPoint.y > 10) {
                System.out.println("Error! You entered the wrong coordinates! Try again:");
                return false;
            } else if (board.getCeil(shotPoint.x, shotPoint.y) == 'O'
                    || board.getCeil(shotPoint.x, shotPoint.y) == 'X') {
                board.setCeil(shotPoint.x, shotPoint.y, 'X');
                board.printBoardWithFogOfWar();
                if (isSankAShip(shotPoint) && !wasShipLast()) {
                    System.out.println("You sank a ship! Specify a new target:");
                } else {
                    System.out.println("You hit a ship! Try again:");
                }
            } else {
                board.setCeil(shotPoint.x, shotPoint.y, 'M');
                board.printBoardWithFogOfWar();
                System.out.println("You missed! Try again:");
            }

            return true;
        }

        private boolean isGameEnd() {
            return wasShipLast();
        }
        public void run() {

            Point firstCoordinate;
            Point secondCoordinate;
            scanner = new Scanner(System.in);

            for (Ships ship : Ships.values()) {
                System.out.printf("Enter the coordinates of the %s (%d cells):\n", ship.getTypeOfShip(), ship.getLength());
                do {
                    String[] shipLocation = scanner.nextLine().toUpperCase().split(" ");
                    firstCoordinate = new Point(shipLocation[0]. charAt(0), shipLocation[0].substring(1));
                    secondCoordinate = new Point(shipLocation[1].charAt(0), shipLocation[1].substring(1));
                } while (!isShipPlaced(firstCoordinate, secondCoordinate, ship));
            }

            System.out.println("The game starts!");
            board.printBoardWithFogOfWar();
            System.out.println("Take a shot!");

            do {
                String shot;
                do {
                    shot = scanner.nextLine().toUpperCase();
                } while (!isShotFired(shot));
            } while (!isGameEnd());

        }
    }
  learner_created: true
- name: src/battleship/Player.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/125/stages/667/implement#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Mon, 31 Oct 2022 12:41:17 UTC
record: -1
