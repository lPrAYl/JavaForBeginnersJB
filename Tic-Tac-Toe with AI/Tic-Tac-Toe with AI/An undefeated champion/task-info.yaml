type: edu
files:
- name: src/tictactoe/Main.java
  visible: true
  text: |
    package tictactoe;

    public class Main {
        public static void main(String[] args) {
            // write your code here
        }
    }
  learner_created: false
- name: test/TicTacToeTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.util.List;


    public class TicTacToeTest extends StageTest<String> {

        int[] easyAiMoves = new int[9];

        @DynamicTest(order = 0)
        CheckResult testBadParameters() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("start");
            if (!output.toLowerCase().contains("bad parameters")) {
                return CheckResult.wrong("After entering start command with wrong parameters you should print 'Bad parameters!' and ask to enter a command again!");
            }

            output = program.execute("start easy");
            if (!output.toLowerCase().contains("bad parameters")) {
                return CheckResult.wrong("After entering start command with wrong parameters you should print 'Bad parameters!' and ask to enter a command again!");
            }

            program.execute("exit");

            if (!program.isFinished()) {
                return CheckResult.wrong("After entering 'exit' command you should stop the program!");
            }

            return CheckResult.correct();
        }


        @DynamicTest(order = 1)
        CheckResult testGridOutput() {

            TestedProgram program = new TestedProgram();

            program.start();

            String output = program.execute("start user easy");

            Grid printedGrid = Grid.fromOutput(output);
            Grid emptyGrid = Grid.fromLine("_________");

            if (!printedGrid.equals(emptyGrid)) {
                return CheckResult.wrong("After starting the program you should print an empty grid!\n" +
                    "Correct empty grid:\n" + emptyGrid);
            }

            if (!output.toLowerCase().contains("enter the coordinates:")) {
                return CheckResult.wrong("After printing an empty grid you should ask to enter cell coordinates!");
            }

            output = program.execute("2 2");

            Grid gridAfterMove = Grid.fromOutput(output);
            Grid correctGridAfterMove = Grid.fromLine("____X____");

            if (!gridAfterMove.equals(correctGridAfterMove)) {
                return CheckResult.wrong("After making the move wrong grid was printed.\n" +
                    "Your grid:\n" + gridAfterMove + "\n" +
                    "Correct grid:\n" + correctGridAfterMove);
            }

            if (!output.toLowerCase().replace("'", "\"").contains("making move level \"easy\"")) {
                return CheckResult.wrong("After entering a cell coordinates you should print:\nMaking move level \"easy\"");
            }

            Grid gridAfterAiMove = Grid.fromOutput(output, 2);

            if (gridAfterAiMove.equals(gridAfterMove)) {
                return CheckResult.wrong("After AI move grid wasn't changed!");
            }

            Grid gameGrid = gridAfterAiMove;

            while (true) {
                if (gameGrid.getGameState() != GameState.NOT_FINISHED) {
                    switch (gameGrid.getGameState()) {
                        case X_WIN:
                            if (!output.contains("X wins")) {
                                return CheckResult.wrong("You should print 'X wins' if X win the game");
                            }
                            break;
                        case O_WIN:
                            if (!output.contains("O wins")) {
                                return CheckResult.wrong("You should print 'O wins' if O win the game");
                            }
                            break;
                        case DRAW:
                            if (!output.contains("Draw")) {
                                return CheckResult.wrong("You should print 'Draw' if the game ends with draw!");
                            }
                            break;
                    }
                    break;
                }
                Position nextMove = Minimax.getMove(gameGrid, CellState.X);

                Grid tempGrid = gameGrid.copy();
                tempGrid.setCell(nextMove.x, nextMove.y, CellState.X);

                output = program.execute((nextMove.x + 1) + " " + (nextMove.y + 1));

                gameGrid = Grid.fromOutput(output);

                if (!gameGrid.equals(tempGrid)) {
                    return CheckResult.wrong("After making move (" + nextMove + ") the game grid is wrong!\n" +
                        "Your gird\n" + gameGrid + "\n" +
                        "Correct grid\n" + tempGrid);
                }

                if (gameGrid.getGameState() != GameState.NOT_FINISHED)
                    continue;

                gameGrid = Grid.fromOutput(output, 2);
            }

            return CheckResult.correct();
        }

        @DynamicTest(repeat = 100, order = 2)
        CheckResult checkEasyAi() {
            TestedProgram program = new TestedProgram();
            program.start();

            program.execute("start user easy");

            String output = program.execute("2 2");

            Grid gridAfterAiMove = Grid.fromOutput(output, 2);

            CellState[][] array = gridAfterAiMove.getGrid();

            for (int i = 0; i < 9; i++) {
                if (i == 4) {
                    continue;
                }
                if (array[i / 3][i % 3] == CellState.O) {
                    easyAiMoves[i]++;
                }
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 3)
        CheckResult checkRandom() {
            double averageScore = 0;

            for (int i = 0; i < easyAiMoves.length; i++) {
                averageScore += (i + 1) * easyAiMoves[i];
            }

            averageScore /= 8;

            double expectedValue = (double) (1 + 2 + 3 + 4 + 6 + 7 + 8 + 9) * 100 / 8 / 8;

            if (Math.abs(averageScore - expectedValue) > 20) {
                return CheckResult.wrong("Looks like your Easy level AI doesn't make a random move!");
            }

            return CheckResult.correct();
        }

        boolean isEasyNotMovingLikeMedium = false;

        @DynamicTest(repeat = 30, order = 4)
        CheckResult checkEasyNotMovingLikeMedium() {

            if (isEasyNotMovingLikeMedium) {
                return CheckResult.correct();
            }

            TestedProgram program = new TestedProgram();
            program.start();
            program.execute("start user easy");

            String output = program.execute("2 2");

            Grid gameGrid = Grid.fromOutput(output, 2);

            CellState[][] cellStates = gameGrid.getGrid();

            if (cellStates[0][0] == CellState.EMPTY && cellStates[2][2] == CellState.EMPTY) {
                output = program.execute("1 1");
                gameGrid = Grid.fromOutput(output, 2);
                if (gameGrid.getGrid()[2][2] == CellState.EMPTY) {
                    isEasyNotMovingLikeMedium = true;
                }
            } else {
                output = program.execute("1 3");
                gameGrid = Grid.fromOutput(output, 2);
                if (gameGrid.getGrid()[2][0] == CellState.EMPTY) {
                    isEasyNotMovingLikeMedium = true;
                }
            }

            program.stop();
            return CheckResult.correct();
        }

        @DynamicTest(order = 5)
        CheckResult checkEasyNotMovingLikeMediumAfter() {
            if (!isEasyNotMovingLikeMedium) {
                return CheckResult.wrong("Looks like your Easy level AI doesn't make a random move!");
            }
            return CheckResult.correct();
        }

        @DynamicTest(order = 6)
        CheckResult checkEasyVsEasy() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("start easy easy");

            List<Grid> gridList = Grid.allGridsFromOutput(output);

            Grid.checkGridSequence(gridList);

            return CheckResult.correct();
        }

        @DynamicTest(repeat = 10, order = 7)
        CheckResult checkMediumAi() {
            TestedProgram program = new TestedProgram();
            program.start();
            program.execute("start user medium");

            String output = program.execute("2 2");

            Grid gameGrid = Grid.fromOutput(output, 2);

            CellState[][] cellStates = gameGrid.getGrid();

            if (cellStates[0][0] == CellState.EMPTY && cellStates[2][2] == CellState.EMPTY) {
                output = program.execute("1 1");
                gameGrid = Grid.fromOutput(output, 2);
                if (gameGrid.getGrid()[2][2] == CellState.EMPTY) {
                    return CheckResult.wrong("Looks like your Medium level AI doesn't make a correct move!");
                }
            } else {
                output = program.execute("1 3");
                gameGrid = Grid.fromOutput(output, 2);
                if (gameGrid.getGrid()[2][0] == CellState.EMPTY) {
                    return CheckResult.wrong("Looks like your Medium level AI doesn't make a correct move!");
                }
            }
            program.stop();

            return CheckResult.correct();
        }

        @DynamicTest(order = 8, repeat = 5)
        CheckResult checkMediumVsMedium() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("start medium medium");

            List<Grid> gridList = Grid.allGridsFromOutput(output);

            Grid.checkGridSequence(gridList);

            return CheckResult.correct();
        }

        boolean isMediumNotMovingLikeHard = false;

        @DynamicTest(repeat = 30, order = 9)
        CheckResult checkMediumNotMovingLikeHard() {

            if (isMediumNotMovingLikeHard) {
                return CheckResult.correct();
            }

            TestedProgram program = new TestedProgram();
            program.start();

            program.execute("start user medium");

            String output = program.execute("2 2");

            Grid userMoveGrid = Grid.fromOutput(output, 1);
            Grid mediumMoveGrid = Grid.fromOutput(output, 2);

            Position mediumMove = Grid.getMove(userMoveGrid, mediumMoveGrid);

            List<Position> minimaxCorrectPositions = Minimax.getAvailablePositions(userMoveGrid, CellState.O);

            if (!minimaxCorrectPositions.contains(mediumMove)) {
                isMediumNotMovingLikeHard = true;
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 10)
        CheckResult checkMediumNotMovingLikeHardAfter() {
            if (!isMediumNotMovingLikeHard) {
                return CheckResult.wrong("Looks like Medium level AI doesn't make a random move!");
            }
            return CheckResult.correct();
        }

        @DynamicTest(order = 11)
        CheckResult checkHardAi() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("start user hard");
            Grid grid = Grid.fromOutput(output);
            Position nextMove = Minimax.getMove(grid, CellState.X);
            output = program.execute((nextMove.x + 1) + " " + (nextMove.y + 1));

            while (!output.toLowerCase().contains("win") && !output.toLowerCase().contains("draw")) {
                Grid gridAfterUserMove = Grid.fromOutput(output);
                Grid gridAfterAiMove = Grid.fromOutput(output, 2);
                Position aiMove = Grid.getMove(gridAfterUserMove, gridAfterAiMove);

                List<Position> correctMinimaxMovePositions = Minimax.getAvailablePositions(gridAfterUserMove, CellState.O);
                if (!correctMinimaxMovePositions.contains(aiMove)) {
                    return CheckResult.wrong("Your minimax algorithm is wrong! It chooses wrong positions to make a move!");
                }

                nextMove = Minimax.getMove(gridAfterAiMove, CellState.X);

                output = program.execute((nextMove.x + 1) + " " + (nextMove.y + 1));
            }

            return CheckResult.correct();
        }

        @DynamicTest(repeat = 5, order = 12)
        CheckResult checkHardVsHard() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("start hard hard");

            if (!output.toLowerCase().contains("draw")) {
                return CheckResult.wrong("The result of the game between minimax algorithms should be always 'Draw'!\n" +
                    "Make sure your output contains 'Draw'.");
            }

            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/tictactoe/TicTacToe.java
  visible: true
  text: |
    package tictactoe;

    import java.util.Arrays;
    import java.util.Random;
    import java.util.Scanner;

    enum Status {
        NOT_STARTED, X_TURN, O_TURN, FINISHED, DRAW, X_WINS, O_WINS
    }

    enum Player {
        USER, EASY, MEDIUM, HARD
    }

    public class TicTacToe {

        private int xCount;
        private int oCount;
        private char[][] field;
        private Status status;
        private Scanner scanner;
        private Player xPlayer;
        private Player oPlayer;


        TicTacToe() {
            this.field = new char[3][3];
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    this.field[i][j] = ' ';
                }
            }
            this.xCount = 0;
            this.oCount = 0;
            this.status = Status.NOT_STARTED;
            this.scanner = new Scanner(System.in);
        }

        private void printField() {
            for (int i = 0; i < 9; i++) {
                System.out.print('-');
            }
            System.out.println();

            for (int i = 0; i < 3; i++) {
                System.out.print("| ");
                for (int j = 0; j < 3; j++) {
                    System.out.print(field[i][j] + " ");
                }
                System.out.println("|");
            }

            for (int i = 0; i < 9; i++) {
                System.out.print('-');
            }
            System.out.println();
        }

        private void checkStatus() {
            for (int i = 0; i < 3 && (status == Status.X_TURN || status == Status.O_TURN); i++) {
                if (field[i][0] == field[i][1] && field[i][0] == field[i][2]) {
                    if (field[i][0] == 'X') {
                        status = Status.X_WINS;
                    } else if (field[i][0] == 'O') {
                        status = Status.O_WINS;
                    }
                }
            }

            for (int j = 0; j < 3 && (status == Status.X_TURN || status == Status.O_TURN); j++) {
                if (field[0][j] == field[1][j] && field[0][j] == field[2][j]) {
                    if (field[0][j] == 'X') {
                        status = Status.X_WINS;
                    } else if (field[0][j] == 'O') {
                        status = Status.O_WINS;
                    }
                }
            }

            if (status == Status.X_TURN || status == Status.O_TURN) {
                if ((field[0][0] == field[1][1] && field[0][0] == field[2][2]) ||
                        (field[0][2] == field[1][1] && field[0][2] == field[2][0])) {
                    if (field[1][1] == 'X') {
                        status = Status.X_WINS;
                    } else if (field[1][1] == 'O') {
                        status = Status.O_WINS;
                    }
                } else if (xCount + oCount == 9) {
                    status = Status.DRAW;
                }
            }

            switch (status.name()) {
                case "DRAW" -> System.out.println("Draw");
                case "O_WINS" -> System.out.println("O wins");
                case "X_WINS" -> System.out.println("X wins");
                case "X_TURN" -> status = Status.O_TURN;
                case "O_TURN" -> status = Status.X_TURN;
            }
        }

        private void userTurn() {
            System.out.println("Enter the coordinates: ");
            try {
                String[] coordinates = scanner.nextLine().split(" ");
                int i = Integer.parseInt(coordinates[0]);
                int j = Integer.parseInt(coordinates[1]);

                if (i > 3 || i < 1 || j > 3 || j < 1) {
                    System.out.println("Coordinates should be from 1 to 3!");
                    userTurn();
                } else if (field[i - 1][j - 1] != ' ') {
                    System.out.println("This cell is occupied! Choose another one!");
                    userTurn();
                } else {
                    if (status == Status.X_TURN) {
                        field[i - 1][j - 1] = 'X';
                        xCount++;
                    } else if (status == Status.O_TURN) {
                        field[i - 1][j - 1] = 'O';
                        oCount++;
                    }
                }
            } catch (NumberFormatException e) {
                System.out.println("You should enter numbers!");
                userTurn();
            }
        }

        private void easyTurn() {
            int m;
            int n;

            System.out.println("Making move level \"easy\"");
            Random random = new Random();

            do {
                m = random.nextInt(3);
                n = random.nextInt(3);
            } while (field[m][n] != ' ');

            if (status == Status.X_TURN) {
                field[m][n] = 'X';
                xCount++;
            } else if (status == Status.O_TURN) {
                field[m][n] = 'O';
                oCount++;
            }
        }

        private void mediumTurn() {
            int m = -1;
            int n = -1;
            char ch = 'X';

            System.out.println("Making move level \"medium\"");

            if (status == Status.O_TURN) {
                ch = 'O';
            }
            for (int i = 0; i < 3 && m == -1; i++) {
                int count = 0;
                for (int j = 0; j < 3; j++) {
                    if (field[i][j] == ' ') {
                        n = j;
                        count++;
                    } else if (field[i][j] != ch) {
                        count = 0;
                        break;
                    }
                }
                if (count == 1) {
                    m = i;
                }
            }

            if (field[1][1] != ch && m == -1) {
                if (field[1][1] == ' ') {
                    if ((field[0][0] == field[2][2] && field[0][0] != ' ' && field[0][0] != ch)
                            || (field[0][2] == field[2][0] && field[0][2] != ' ' && field[0][0] != ch) ) {
                        n = 1;
                        m = 1;
                    }
                } else {
                    if (field[0][0] != ch && field[0][0] != ' ' && field[2][2] == ' ') {
                        m = 2;
                        n = 2;
                    } else if (field[0][0] == ' ' && field[2][2] != ch  && field[2][2] != ' ') {
                        m = 0;
                        n = 0;
                    } else if (field[2][0] == ' ' && field[0][2] != ch && field[0][2] != ' ') {
                        m = 2;
                        n = 0;
                    } else if (field[0][2] == ' ' && field[2][0] != ch && field[2][0] != ' ') {
                        m = 0;
                        n = 2;
                    }
                }
            }

            for (int i = 0; i < 3 && m == -1; i++) {
                int count = 0;
                for (int j = 0; j < 3; j++) {
                    if (field[i][j] == ' ') {
                        n = j;
                        count++;
                    } else if (field[i][j] == ch) {
                        count = 0;
                        break;
                    }
                }
                if (count == 1) {
                    m = i;
                }
            }

            if (m == -1) {
                Random random = new Random();
                do {
                    m = random.nextInt(3);
                    n = random.nextInt(3);
                } while (field[m][n] != ' ');
            }
            if (ch == 'X') {
                xCount++;
            } else {
                oCount++;
            }
            field[m][n] = ch;
        }

        private void checkStartCommands(String promt) {
            String[] commands = promt.split(" ");
            if (commands.length == 1 && commands[0].equals("exit")) {
                status = Status.FINISHED;
            } else if (commands.length == 3 && commands[0].equals("start")) {
                if ((commands[1].equals("user") || commands[1].equals("easy") || commands[1].equals("medium")) &&
                        (commands[2].equals("user") || commands[2].equals("easy") || commands[2].equals("medium"))) {
                    xPlayer = Player.valueOf(commands[1].toUpperCase());
                    oPlayer = Player.valueOf(commands[2].toUpperCase());
                    status = Status.X_TURN;
                }
            }
        }

        private void turn(Player player) {
            switch (player.name()) {
                case "USER" -> userTurn();
                case "EASY" -> easyTurn();
                case "MEDIUM" -> mediumTurn();
            }
            printField();
            checkStatus();
        }

        public void start() {
            do {
                do {
                    System.out.println("Input command: ");
                    checkStartCommands(scanner.nextLine());
                    if (status.equals(Status.NOT_STARTED)) {
                        System.out.println("Bad parameters!");
                    }
                } while (status.equals(Status.NOT_STARTED));

                printField();

                while (status == Status.X_TURN || status == Status.O_TURN) {
                    if (status == Status.X_TURN) {
                        turn(xPlayer);
                    } else {
                        turn(oPlayer);
                    }
                }
            } while (!status.equals(Status.FINISHED));
        }
    }
  learner_created: true
- name: src/tictactoe/Player.java
  visible: true
  learner_created: true
- name: src/tictactoe/Board.java
  visible: true
  learner_created: true
- name: src/tictactoe/player/Player.java
  visible: true
  learner_created: true
- name: src/tictactoe/player/PlayerType.java
  visible: true
  learner_created: true
- name: src/tictactoe/player/MoveStrategy.java
  visible: true
  learner_created: true
- name: src/tictactoe/player/Move.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/7438#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Wed, 26 Oct 2022 13:12:44 UTC
record: -1
